/****************************************************************************************
 * @filename      : lwcUfwBodyQa
 * @author        : I2MAX
 * @date          : 2021-02-15
 * @group         :
 * @group-content :
 * @description   :
 * @reference     :
 * @release       : v1.0.0
 * @copyright     : Copyright © I2max. All Rights Reserved.
 * @modification Log
 * ===============================================================
 * ver     date               author         description
 * ===============================================================
   1.0     2021-02-15         I2MAX            Create
 ****************************************************************************************/

import { api, track, wire } from 'lwc';
import { LwcUfwBase } from "c/lwcUfwBase";

export default class LwcUfwBodyQa extends LwcUfwBase {
/*
 * =============================================================================
 * =============================================================================
 * Property / getter, setter
 * =============================================================================
 * =============================================================================
 */
    /**
     * spinner 여부
     * @type {boolean}
     */
    @api isSpinner = false;

    /**
     * extra Div 높이
     * modal 화면 밑 부분에 공간이 더 필요한 경우, 사용 (ex. 100px)
     */
    @api extraDivHeight;
    get extraDivStyle() {
        return this.PropertyUtil.isEmpty(this.extraDivHeight) ? null : 'height:' + this.extraDivHeight + ';';
    }

/*
 * =============================================================================
 * =============================================================================
 * function 구현
 * fireXXX : custom 이벤트 발생
 * handleXXX : custom 이벤트 핸들러
 * doXXX : Server 데이터 조회
 * 그 외 함수는 업무에 맞게 구현
 * =============================================================================
 * =============================================================================
 */


/*
 * =============================================================================
 * =============================================================================
 * lifecycle hooks
 * 업무에서는 필요시 override 처리하고,
 * super호출이 필요할 경우 super 호출후에 업무별 로직을 구현
 * constructor, connectedCallback, render, renderedCallback, disConnectedCallback
 * =============================================================================
 * =============================================================================
 */

}